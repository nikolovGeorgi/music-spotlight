{"version":3,"sources":["webpack:///webpack/bootstrap feb54e4c928979d0c1ee?3414","webpack:///./src/vis_nodes.js?0d2a"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AAAA;AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,E","file":"vis_nodes.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap feb54e4c928979d0c1ee","const LENGTH_MAIN = 350,\n      LENGTH_SERVER = 150,\n      LENGTH_SUB = 50,\n      WIDTH_SCALE = 2,\n      GREEN = 'green',\n      RED = '#C5000B',\n      ORANGE = 'orange',\n      //GRAY = '#666666',\n      GRAY = 'gray',\n      BLACK = '#2B1B17';\n\nexport default class Visualizer {\n\n    constructor(container, nodes = [], edges = [], options = {}) {\n        this.container = container;\n        this.nodes = new vis.DataSet(nodes);\n        this.edges = new vis.DataSet(edges);\n\n        const data = {\n            nodes: this.nodes,\n            edges: this.edges\n        };\n\n        this.options = Object.assign({}, {\n            nodes: {\n                scaling: {\n                    min: 16,\n                    max: 32\n                }\n            },\n            edges: {\n                color: GRAY,\n                smooth: false\n            },\n            physics: {\n                barnesHut: {\n                    gravitationalConstant: -30000\n                },\n                stabilization: {\n                    iterations: 2500\n                }\n            },\n            groups: {\n                artists: {\n                    shape: 'dot',\n                    color: \"#ABCDEF\" // red\n                }\n            }\n        }, options);\n\n        this.vis = new vis.Network(this.container, data, options);\n    }\n\n    addNode(id, label) {\n        this.nodes.add({\n            id,\n            label,\n            group: 'artists',\n            value: 10\n        });\n    }\n    \n    addEdge(from, to, label) {\n        this.edges.add({\n            from,\n            to,\n            label,\n            width: WIDTH_SCALE * 2\n        });\n    }\n}\n\n// // var $ = require('jquery');\n\n// // Create a data table with nodes.\n// var nodes = [];\n\n// // Create a data table with links.\n// var edges = [];\n  \n// export function createArtistNodes(id, name) {\n//   nodes.push({\n//     id: id,\n//     label: name,\n//     group: 'artists',\n//     value: 10\n//   });\n//   console.log(\"NODE\", nodes)\n// }\n\n// $(document).ready(function(){\n// //   var network = null;\n\n//   var LENGTH_MAIN = 350,\n//       LENGTH_SERVER = 150,\n//       LENGTH_SUB = 50,\n//       WIDTH_SCALE = 2,\n//       GREEN = 'green',\n//       RED = '#C5000B',\n//       ORANGE = 'orange',\n//       //GRAY = '#666666',\n//       GRAY = 'gray',\n//       BLACK = '#2B1B17';\n\n//   // Called when the Visualization API is loaded.\n\n// /*\n//   nodes.push({\n//       id: 1,\n//       label: 'ABBA',\n//       group: 'switch',\n//       value: 10\n//   });\n//   nodes.push({\n//       id: 2,\n//       label: 'Metallica',\n//       group: 'switch',\n//       value: 8\n//   });\n//   nodes.push({\n//       id: 3,\n//       label: 'Rammstein',\n//       group: 'switch',\n//       value: 6\n//   });\n//   nodes.push({\n//       id: 4,\n//       label: 'SPOTIFY',\n//       group: 'switch',\n//       value: 6\n//   });\n\n//   edges.push({\n//       from: 1,\n//       to: 4,\n//       length: LENGTH_MAIN,\n//       width: WIDTH_SCALE * 6,\n//       label: '0.71 mbps'\n//   });\n//   edges.push({\n//       from: 1,\n//       to: 2,\n//       length: LENGTH_MAIN,\n//       width: WIDTH_SCALE * 6,\n//       label: '0.71 mbps'\n//   });\n//   edges.push({\n//       from: 1,\n//       to: 3,\n//       length: LENGTH_MAIN,\n//       width: WIDTH_SCALE * 4,\n//       label: '0.55 mbps'\n//   });\n\n//   // group around 2\n//   for (var i = 90; i <= 104; i++) {\n//       var value = 1;\n//       var width = WIDTH_SCALE * 2;\n//       var color = GRAY;\n//       var label = null;\n\n//       if (i === 103) {\n//           value = 5;\n//           width = 3;\n//       }\n//       if (i === 102) {\n//           color = RED;\n//           label = 'error';\n//       }\n\n//       nodes.push({\n//           id: i,\n//           label: '192.168.0.' + i,\n//           group: 'desktop',\n//           value: value\n//       });\n//       edges.push({\n//           from: 2,\n//           to: i,\n//           length: LENGTH_SUB,\n//           color: color,\n//           fontColor: color,\n//           width: width,\n//           label: label\n//       });\n//   }\n//   nodes.push({\n//       id: 201,\n//       label: '192.168.0.201',\n//       group: 'desktop',\n//       value: 1\n//   });\n//   edges.push({\n//       from: 2,\n//       to: 201,\n//       length: LENGTH_SUB,\n//       color: GRAY,\n//       width: WIDTH_SCALE\n//   });\n\n//   // group around 3\n//   nodes.push({\n//       id: 202,\n//       label: '192.168.0.202',\n//       group: 'desktop',\n//       value: 4\n//   });\n//   edges.push({\n//       from: 3,\n//       to: 202,\n//       length: LENGTH_SUB,\n//       color: GRAY,\n//       width: WIDTH_SCALE * 2\n//   });\n//   for (var i = 210; i <= 235; i++) {\n//       nodes.push({\n//           id: i,\n//           label: '192.168.0.' + i,\n//           group: 'mobile',\n//           value: 2\n//       });\n//       edges.push({\n//           from: 3,\n//           to: i,\n//           length: LENGTH_SUB,\n//           color: GRAY,\n//           fontColor: GRAY,\n//           width: WIDTH_SCALE\n//       });\n//   }\n//   for (var i = 410; i <= 435; i++) {\n//       nodes.push({\n//           id: i,\n//           label: 'Spotify.' + i,\n//           group: 'mobile',\n//           value: 2\n//       });\n//       edges.push({\n//           from: 4,\n//           to: i,\n//           length: LENGTH_SUB,\n//           color: GREEN,\n//           fontColor: GRAY,\n//           width: WIDTH_SCALE\n//       });\n//   }\n//   // group around 1\n//   nodes.push({\n//       id: 10,\n//       label: '192.168.0.10',\n//       group: 'server',\n//       value: 10\n//   });\n//   edges.push({\n//       from: 1,\n//       to: 10,\n//       length: LENGTH_SERVER,\n//       color: GRAY,\n//       width: WIDTH_SCALE * 6,\n//       label: '0.92 mbps'\n//   });\n//   nodes.push({\n//       id: 11,\n//       label: '192.168.0.11',\n//       group: 'server',\n//       value: 7\n//   });\n//   edges.push({\n//       from: 1,\n//       to: 11,\n//       length: LENGTH_SERVER,\n//       color: GRAY,\n//       width: WIDTH_SCALE * 3,\n//       label: '0.68 mbps'\n//   });\n//   nodes.push({\n//       id: 12,\n//       label: '192.168.0.12',\n//       group: 'server',\n//       value: 3\n//   });\n//   edges.push({\n//       from: 1,\n//       to: 12,\n//       length: LENGTH_SERVER,\n//       color: RED,\n//       width: WIDTH_SCALE,\n//       label: '0.3 mbps'\n//   });\n\n//   nodes.push({\n//       id: 204,\n//       label: 'Vlad',\n//       group: 'internet',\n//       value: 10\n//   });\n//   edges.push({\n//       from: 1,\n//       to: 204,\n//       length: 200,\n//       width: WIDTH_SCALE * 3,\n//       label: '0.63 mbps'\n//   });\n\n// */\n//   // legend\n//   // var mynetwork = document.getElementById('network');\n//   // var x = -mynetwork.clientWidth / 2 + 50;\n//   // var y = -mynetwork.clientHeight / 2 + 50;\n//   // var step = 70;\n\n//   // create a network\n//   var container = document.getElementById('network');\n//   var data = {\n//       nodes: nodes,\n//       edges: edges\n//   };\n//   var options = {\n//       nodes: {\n//           scaling: {\n//               min: 16,\n//               max: 32\n//           }\n//       },\n//       edges: {\n//           color: GRAY,\n//           smooth: false\n//       },\n//       physics: {\n//           barnesHut: {\n//               gravitationalConstant: -30000\n//           },\n//           stabilization: {\n//               iterations: 2500\n//           }\n//       },\n//       groups: {\n//           'switch': {\n//               shape: 'dot',\n//               color: '#FF9900' // orange\n//           },\n//           desktop: {\n//               shape: 'dot',\n//               color: \"#2B7CE9\" // blue\n//           },\n//           mobile: {\n//               shape: 'dot',\n//               color: \"#5A1E5C\" // purple\n//           },\n//           server: {\n//               shape: 'dot',\n//               color: \"#C5000B\" // red\n//           },\n//           internet: {\n//               shape: 'dot',\n//               color: \"#109618\" // green\n//           },\n//           artists: {\n//               shape: 'dot',\n//               color: \"#ABCDEF\" // red\n//           }\n//       }\n//   };\n//   network = new vis.Network(container, data, options);\n\n// });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/vis_nodes.js\n// module id = 0\n// module chunks = 0 1"],"sourceRoot":""}